# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Deploy python version on PIP

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
    tags:
      - '*.*.*' 

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install pylint
      run: pip install pylint setuptools wheel twine

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Lint with pylint
      run: pylint **/*.py

    - name: Install test-dependencies
      run: pip install -r test-requirements.txt

    - name: Test with pytest
      run: pytest --doctest-modules --junitxml=junit/test-results.xml --cov=confultimate --cov-report=xml --cov-report=html

    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.event.release.tag_name }}
        release_name: Release ${{ github.event.release.tag_name }}
        draft: false
        prerelease: false

    - name: Upload tgz
      id: upload-release-tgz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: dist/confultimate-${{ github.event.release.tag_name }}.tar.gz
        asset_name: confultimate-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/x-gzip

    - name: Upload Wheel
      id: upload-release-whl
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: dist/confultimate-${{ github.event.release.tag_name }}-py3-none-any.whl
        asset_name: confultimate-${{ github.event.release.tag_name }}-py3-none-any.whl
        asset_content_type: application/x-wheel+zip
